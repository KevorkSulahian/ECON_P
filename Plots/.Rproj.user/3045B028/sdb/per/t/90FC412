{
    "collab_server" : "",
    "contents" : "library(stringr)\nlibrary(utf8)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(rsconnect)\nlibrary(dplyr)\nlibrary(writexl)\n\nrunApp(\n  list(\n    ui = dashboardPage(\n      dashboardHeader(),\n      dashboardSidebar( fileInput('file1', 'Data from Armstat',\n                                  accept = c(\".xlsx\")),\n                        fileInput('file2', 'Main file',\n                                  accept = c(\".xlsx\")),\n                        selectInput(inputId = \"year\",label=\"Choose year\",\n                                    choices= \"waiting for data\",multiple = TRUE),\n                        selectInput(inputId = \"Expimp\",label=\"Select type of output\",\n                                    choices= c(\"Export\",\"Import\", \"All\", \"Decomposition\",\"Import Decomposition\")),\n                       \n                        actionButton(\n                          inputId = \"submit_loc\",\n                          label = \"Submit\"\n                        ),\n                        br(),\n                        br(),\n                        downloadButton(\"downloadData\", \"Download\",class=\"butt1\")\n                        # tags$head(tags$style(\".butt1{background-color:blue;} .butt1{color: black;} .butt1{font-family: Courier New} ,butt1{align: center}\"))\n                        ),\n      \n      dashboardBody(\n        # fluidRow(\n        # tags$hr(),\n        dataTableOutput(\"table\"),\n        textOutput(\"txt\")\n        # )\n      ))\n    ,\n    server = shinyServer(function(input, output,session) {\n      choice <- reactive({\n        inFile1 <- input$file1\n        if (is.null(inFile1))\n          return(NULL)\n        df  <- readxl::read_xlsx(inFile1$datapath, sheet = \"Armstat\", col_names = TRUE) #Reading the file\n        colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',\n                          'Export','Import_in_tonnas','Import')\n        choices <- unique(df$Year)\n        return (choices)\n      })\n      \n      my_data <- reactive({\n        \n        inFile1 <- input$file1\n        \n        if (is.null(inFile1))\n          return(NULL)\n        inFile2 <- input$file2\n        \n        if (is.null(inFile2))\n          return(NULL)\n        df  <- readxl::read_xlsx(inFile1$datapath, sheet = \"Armstat\", col_names = TRUE) #Reading the file\n        colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',\n                          'Export','Import_in_tonnas','Import')\n        choices <- unique(df$Year)\n        df$Period <- NULL\n        df[,2:7] <- apply(df[,2:7],2,as.numeric)\n        df$Export <- df$Export/1000\n        df$Import <- df$Import/1000\n        #Reading the main file\n        main  <- readxl::read_xlsx(inFile2$datapath, sheet = \"Sheet1\", col_names = FALSE) \n        colnames(main) <-  c('Name','ID')\n        main$ID<-as.numeric(main$ID)\n        ###\n        \n        #Seperating titles and assigning groups to it\n        titles <- main[is.na(main$ID),'Name']\n        counter <- 1\n        for (i in c(1:nrow(titles))){\n          titles[i,'Group'] = counter\n          counter = counter +1\n        }\n        \n        ##\n        year_agg <- function(df, Year){\n          df_Year <- df[df$Year == Year,]\n          agg_df_Year <- df_Year %>%\n            group_by(ID) %>%\n            summarise(Export_in_tonnas = sum(Export_in_tonnas),\n                      Export = sum(Export),\n                      Import_in_tonnas = sum(Import_in_tonnas),\n                      Import = sum(Import))\n          polufinal_Year_1 <- left_join(main, agg_df_Year, by = \"ID\")\n          polufinal_Year_1['Year'] <- Year\n          counter <- 0\n          for (i in c(1:nrow(polufinal_Year_1))){\n            polufinal_Year_1[i,'Group'] = counter\n\n            if (is.na(polufinal_Year_1[i,'ID'])){\n              counter = counter +1\n            }\n          }\n          polufinal_Year_1[is.na(polufinal_Year_1$ID),'Group']<- NA\n          polufinal_Year_1[3:6][is.na(polufinal_Year_1[3:6])] <- 0\n\n          agg_total_Year <-polufinal_Year_1 %>%\n            group_by(Group)  %>%\n            summarise(Total_Export_in_tonnas = sum(Export_in_tonnas),\n                      Total_Export = sum(Export),\n                      Total_Import_in_tonnas = sum(Import_in_tonnas),\n                      Total_Import = sum(Import))\n          agg_total_Year <- agg_total_Year[complete.cases(agg_total_Year), ]\n\n          polufinal_Year_2 <- left_join(titles, agg_total_Year, by = \"Group\")\n          polufinal_Year_2['Group'] <- NULL\n          final_Year <- left_join(polufinal_Year_1,polufinal_Year_2, by = \"Name\")\n\n          for (i in c(1:nrow(final_Year))){\n            if (is.na(final_Year[i,'ID'])){\n              final_Year[i,3:6] <- final_Year[i,9:12]\n            }\n          }\n          final_Year <- final_Year[,-c(8:12)]\n\n\n          return (final_Year)\n        }\n        \n        years <- as.numeric(input$year)\n        final_year1 <- year_agg(df,years[1])\n        final_year2 <- year_agg(df,years[2])\n        first_output <- inner_join(final_year1, final_year2,\n                                   by = c(\"Name\",\"ID\"),  suffix = c(paste0(\".\",years[1]), paste0(\".\",years[2])))\n        first_output[,'Year.2017'] <- NULL\n        first_output[,'Year.2018'] <- NULL\n        if (input$Expimp == \"All\") {\n          all <- inner_join(final_year1, final_year2, by = c(\"Name\",\"ID\"),  suffix = c(paste0(\".\",years[1]), paste0(\".\",years[2])))\n          all[,paste0(\"Year.\",years[1])] <- NULL\n          all[,paste0(\"Year.\",years[2])] <- NULL\n          all <- rbind(c(\"Ընդամենը\",\"\",colSums(all[is.na(all$ID),c(3:10)]),\"-\"),all)\n          return (all)\n        }\n\n        if (input$Expimp==\"Decomposition\"){\n          dec1 <- first_output[first_output$ID %in% c(2603,2402,7108,2208,7607,7202,7102,7402),]\n          dec1$price_growth <- dec1$Export.2018 - dec1$Export.2017                                            \n          dec1$mas_growth <- dec1$Export_in_tonnas.2018 - dec1$Export_in_tonnas.2017\n          dec1$quant_factor <- (dec1$Export.2017*dec1$mas_growth*100)/(dec1$Export_in_tonnas.2017*dec1$price_growth)\n          dec1$price_factor <- 100-dec1$quant_factor\n          dec1$pf_growth <- dec1$price_factor*dec1$price_growth/100\n          dec1$qf_growth <- dec1$price_growth - dec1$pf_growth\n          dec_final <- dec1[order(-dec1$Export.2018),c(\"Name\",\"ID\",\"Export_in_tonnas.2018\",\"Export.2018\",\"mas_growth\",\"price_growth\",\"qf_growth\",\"pf_growth\")]\n          dec_final <- rbind(dec_final, c(\"Ընդամենը\",\"\",colSums(dec_final[,-c(1,2)])))\n          dec_final[,-c(1,2)] <- round(apply(dec_final[,-c(1,2)],2,as.numeric),5)\n          \n          return (dec_final)\n        }\n        if (input$Expimp == \"Import Decomposition\"){\n          imp1 <- first_output[first_output$ID %in% c(2711,2710,8703,8517,8471,8704,\n                                                      8429,8431,3004,3102,7102,7108,2401,7601,1001,4810) ,]\n          \n          imp1$Group <- c(1,1,2,2,2,2,2,2,3,3,4,4,4,4,4,4)\n          titles_imp <- c(\"ՎԱՌԵԼԻՔՆԵՐ\", \"ՄԵՔԵՆԱՆԵՐ, ՍԱՐՔԱՎՈՐՈՒՄՆԵՐ ԵՎ ՏՐԱՆՍՊՈՐՏԱՅԻՆ ՄԻՋՈՑՆԵՐ\",\n                          \"ՔԻՄԻԱԿԱՆ ԾԱԳՄԱՆ ԱՊՐԱՆՔՆԵՐ\",\"ՀՈՒՄՔԱՅԻՆ ԱՊՐԱՆՔՆԵՐ\")\n          totals <- imp1 %>%\n            group_by(Group) %>%\n            summarise(Import_in_tonnas.2017 = sum(Import_in_tonnas.2017),\n                      Import.2017 = sum(Import.2017),\n                      Import_in_tonnas.2018 = sum(Import_in_tonnas.2018),\n                      Import.2018 = sum(Import.2018))\n          totals$ID <- NA\n          totals$Name <- titles_imp\n          imp1 <- imp1[,c(\"Name\",\"ID\",\"Import_in_tonnas.2018\",\"Import.2018\",\"Import_in_tonnas.2017\",\"Import.2017\",\"Group\")]\n          \n          imp2 <- rbind(imp1,totals)\n          imp2 <- imp2[order(imp2$Group,-imp2$Import_in_tonnas.2018),]\n          imp2$mass_growth <- imp2$Import_in_tonnas.2018-imp2$Import_in_tonnas.2017\n          imp2$price_growth <- imp2$Import.2018 - imp2$Import.2017\n          imp2$Group<-NULL\n          options(scipen=999)\n          return (imp2)\n        }\n\n        join_and_output <- function(df1, df2, exp_imp){\n\n          final <- inner_join(df1, df2, by = c(\"Name\",\"ID\"),  suffix = c(\".2017\", \".2018\"))\n          if(exp_imp == \"Export\"){\n            final$Abs_Growth <- final$Export.2018 - final$Export.2017\n            final$Pct_Growth <- final$Abs_Growth * 100 / final$Export.2017\n          }\n          else if(exp_imp == \"Import\"){\n            final$Abs_Growth <- final$Import.2018 - final$Import.2017\n            final$Pct_Growth <- final$Abs_Growth * 100 / final$Import.2017\n          }\n\n\n          groups <- final[is.na(final$ID),c(1,13)]\n          groups_sort <- groups[order(groups$Abs_Growth),]\n          groups_sort['ord']<-order(groups_sort$Abs_Growth)\n          final <- left_join(final,groups_sort[,c(1,3)],by=\"Name\")\n          for (i in c(1:nrow(final))){\n            if (is.na(final[i,'ID'])){\n              counter <- final[i,'ord']\n            }\n            final[i,'ord'] = counter\n          }\n          counter <- 0\n          for (i in c(1:nrow(final))){\n            if (is.na(final[i,'ID'])){\n              counter = counter + 1\n              final[i,'ord2'] <- counter\n              counter = counter + 1\n            } \n            else {\n              final[i,'ord2'] <- counter\n            }\n          }\n          final <- final[order(-final$ord, final$ord2, -final[,paste0(exp_imp,\".2018\")]),]\n          counter <- 1\n          for (i in c(1:nrow(final))){\n            if (is.na(final[i,'ID'])){\n              final[i,'rank_price'] <- 0\n              counter <- 1\n            } \n            else {\n              final[i,'rank_price'] <- counter\n              counter = counter +1\n            }\n          }\n          final <- final[order(-final$ord, final$ord2, -final$Abs_Growth),]\n          counter <- 1\n          for (i in c(1:nrow(final))){\n            if (is.na(final[i,'ID'])){\n              final[i,'rank_abs_growth'] <- 0\n              counter <- 1\n            } \n            else {\n              final[i,'rank_abs_growth'] <- counter\n              counter = counter +1\n            }\n          }\n          final <- final[final$rank_abs_growth<=10 | final$rank_price<=10,]\n          final <- final[,-c(15:18)]\n          options(scipen=999)\n          final[!(is.finite(final$Pct_Growth)) | (final$Pct_Growth >= 1000),\"Pct_Growth\"] <- '-'\n          # vars <-assign_var(final,exp_imp)\n          # print(vars)\n          final <- final[,c(\"Name\",\"ID\",paste0(exp_imp,\".2018\"),paste0(exp_imp,\".2017\"),\"Abs_Growth\",\"Pct_Growth\")]\n          final <- final[final[,3]>0 & final[,4] >0,]\n          final <- rbind(c(\"Ընդամենը\",\"\",colSums(final[is.na(final$ID),c(3:5)]),\"-\"),final)\n          final[1,'Pct_Growth'] = as.numeric(final[1,'Abs_Growth']) /as.numeric(final[1,c(4)])\n          return(final)\n        }\n\n        final <- join_and_output(final_year1,final_year2,input$Expimp)\n\n\n\n\n        return (final)\n        \n      })\n      output$txt <- renderText({\n        \"Instructions:\"\n      })\n      observe({\n        updateSelectInput(session,\"year\",choices=choice())\n      })\n      observeEvent(\n        eventExpr = input[[\"submit_loc\"]],\n        handlerExpr = {\n          \n          output$table <- renderDataTable({\n          my_data()\n      }) })\n      output$downloadData <- downloadHandler(\n        filename = function() {\n            (\"untitled.xlsx\")\n        },\n        content = function(file) {\n          write_xlsx(my_data(), file)\n        }\n      )\n      \n    })\n  ))\n\n",
    "created" : 1538664222617.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1771905038",
    "id" : "90FC412",
    "lastKnownWriteTime" : 1535643762,
    "last_content_update" : 1535643762,
    "path" : "~/Desktop/Min Economy/Filtering/filtering.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}