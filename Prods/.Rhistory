main$col1 <- substring(main$col1,2)
ID <- as.data.frame(cbind(main$col1,main$col2))
colnames(ID) <- c("Code",'Product label')
ID$Code <- as.character(ID$Code)
setwd("countries")
files=list.files(pattern=".xlsx")
setwd(for_main)
Year=input$year
for (i in 1:length(files)){
path = files[i]
country <-  readxl::read_xlsx(paste0("countries/",path),  sheet = "Trade_Map_-_List_of_products_ex", col_names = FALSE)
country_name <- as.character(country[1, 'X__1'])
country_name <- substring(country_name,30)
country <- country[complete.cases(country$X__2),]
colnames(country) <- unlist(country[country$X__1 =='Code',])
colnames(country) <- as.character(unlist(country[1,]))
country = country[-1, ]
country$Code <- substring(country$Code,2)
cols <- colnames(country)
name <- cols[grep(Year, cols)]
if (length(name)!=0){
test <- country[,c('Code',name)]
colnames(test) <- c('Code',country_name )
}
else {
test <- country[,'Code']
test[country_name]=' '
}
test$Code <- as.character(test$Code)
ID <- left_join(ID,test,by='Code')
}
ID[is.na(ID)] <- 0
return (ID)
})
observeEvent(
eventExpr = input[["submit_loc"]],
handlerExpr = {
output$table <- renderDataTable({
my_data()
}) })
output$downloadData <- downloadHandler(
filename = function() {
("untitled.xlsx")
},
content = function(file) {
write_xlsx(my_data(), file)
}
)
})
))
library(dplyr)
library(writexl)
library("xlsx")
install.packages("r2excel")
df  <- readxl::read_xlsx("subcat.xlsx", sheet = "Armstat", col_names = TRUE) #Reading the file
colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',
'Export','Import_in_tonnas','Import')
df$Period <- NULL
df[,2:7] <- apply(df[,2:7],2,as.numeric)
df$Export <- df$Export/1000
df$Import <- df$Import/1000
main  <- readxl::read_xlsx("main.xlsx", sheet = "Sheet1", col_names = FALSE)
colnames(main) <-  c('Name','ID')
main$ID<-as.numeric(main$ID)
titles <- main[is.na(main$ID),'Name']
counter <- 1
for (i in c(1:nrow(titles))){
titles[i,'Group'] = counter
counter = counter +1
}
year_agg <- function(df, Year){
df_Year <- df[df$Year == Year,]
agg_df_Year <- df_Year %>%
group_by(ID) %>%
summarise(Export_in_tonnas = sum(Export_in_tonnas),
Export = sum(Export),
Import_in_tonnas = sum(Import_in_tonnas),
Import = sum(Import))
polufinal_Year_1 <- left_join(main, agg_df_Year, by = "ID")
polufinal_Year_1['Year'] <- Year
counter <- 0
for (i in c(1:nrow(polufinal_Year_1))){
polufinal_Year_1[i,'Group'] = counter
if (is.na(polufinal_Year_1[i,'ID'])){
counter = counter +1
}
}
polufinal_Year_1[is.na(polufinal_Year_1$ID),'Group']<- NA
polufinal_Year_1[3:6][is.na(polufinal_Year_1[3:6])] <- 0
agg_total_Year <-polufinal_Year_1 %>%
group_by(Group)  %>%
summarise(Total_Export_in_tonnas = sum(Export_in_tonnas),
Total_Export = sum(Export),
Total_Import_in_tonnas = sum(Import_in_tonnas),
Total_Import = sum(Import))
agg_total_Year <- agg_total_Year[complete.cases(agg_total_Year), ]
polufinal_Year_2 <- left_join(titles, agg_total_Year, by = "Group")
polufinal_Year_2['Group'] <- NULL
final_Year <- left_join(polufinal_Year_1,polufinal_Year_2, by = "Name")
for (i in c(1:nrow(final_Year))){
if (is.na(final_Year[i,'ID'])){
final_Year[i,3:6] <- final_Year[i,9:12]
}
}
final_Year <- final_Year[,-c(8:12)]
return (final_Year)
}
final_2017 <- year_agg(df,2017)
final_2018 <- year_agg(df,2018)
first_output <- inner_join(final_2017, final_2018, by = c("Name","ID"),  suffix = c(".2017", ".2018"))
library(stringr)
library(utf8)
library(ggplot2)
library(shiny)
library(shinyjs)
library(shinydashboard)
library(rsconnect)
library(dplyr)
install.packages("shinyjs")
library(shinyjs)
library(shinydashboard)
library(rsconnect)
library(dplyr)
library(writexl)
options(shiny.maxRequestSize=30*1024^2)
runApp(
list(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar( fileInput('file1', 'Հիմնական դատան',
accept = c(".xlsx")),
fileInput('file2', 'Բոլոր կոդերով դատան',
accept = c(".xlsx")),
selectInput(inputId = "type",label="Ընտրել ժամանակահատվածը",
choices= c("Տարեկան","Եռամսյակային","Ամսեկան")),
selectInput(inputId = "year",label="Ընտրել տարին",
choices= c("2007","2008","2009","2010","2011",
"2012","2013","2014","2015",
"2016","2017","2018"),multiple = TRUE),
selectInput(inputId = "Expimp",label="Ներմուծում թե Արտահանում",
choices= c("Արտահանում","Ներմուծում")),
textInput(inputId = "code", label = "Ընտրել ապրանքի կոդը"),
actionButton(
inputId = "submit_loc",
label = "Submit"
),
br(),
br(),
downloadButton("downloadData", "Download",class="butt1")
# tags$head(tags$style(".butt1{background-color:blue;} .butt1{color: black;} .butt1{font-family: Courier New} ,butt1{align: center}"))
),
dashboardBody(
# fluidRow(
# tags$hr(),
dataTableOutput("table")
# )
))
,
server = shinyServer(function(input, output,session) {
my_data <- reactive({
inFile1 <- input$file1
if (is.null(inFile1))
return(NULL)
inFile2 <- input$file2
if (is.null(inFile2))
return(NULL)
df  <- readxl::read_xlsx(inFile1$datapath, sheet = "Armstat", col_names = TRUE) #Reading the file
colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',
'Export','Import_in_tonnas','Import')
choices <- unique(df$Year)
df$Period <- NULL
df[,2:7] <- apply(df[,2:7],2,as.numeric)
df$Export <- df$Export/1000
df$Import <- df$Import/1000
#Reading the main file
main  <- readxl::read_xlsx(inFile2$datapath, sheet = "Sheet1", col_names = FALSE)
colnames(main) <-  c('Name','ID')
main$ID<-as.numeric(main$ID)
###
#Seperating titles and assigning groups to it
titles <- main[is.na(main$ID),'Name']
counter <- 1
for (i in c(1:nrow(titles))){
titles[i,'Group'] = counter
counter = counter +1
}
##
year_agg <- function(df, Year){
df_Year <- df[df$Year == Year,]
agg_df_Year <- df_Year %>%
group_by(ID) %>%
summarise(Export_in_tonnas = sum(Export_in_tonnas),
Export = sum(Export),
Import_in_tonnas = sum(Import_in_tonnas),
Import = sum(Import))
polufinal_Year_1 <- left_join(main, agg_df_Year, by = "ID")
polufinal_Year_1['Year'] <- Year
counter <- 0
for (i in c(1:nrow(polufinal_Year_1))){
polufinal_Year_1[i,'Group'] = counter
if (is.na(polufinal_Year_1[i,'ID'])){
counter = counter +1
}
}
polufinal_Year_1[is.na(polufinal_Year_1$ID),'Group']<- NA
polufinal_Year_1[3:6][is.na(polufinal_Year_1[3:6])] <- 0
agg_total_Year <-polufinal_Year_1 %>%
group_by(Group)  %>%
summarise(Total_Export_in_tonnas = sum(Export_in_tonnas),
Total_Export = sum(Export),
Total_Import_in_tonnas = sum(Import_in_tonnas),
Total_Import = sum(Import))
agg_total_Year <- agg_total_Year[complete.cases(agg_total_Year), ]
polufinal_Year_2 <- left_join(titles, agg_total_Year, by = "Group")
polufinal_Year_2['Group'] <- NULL
final_Year <- left_join(polufinal_Year_1,polufinal_Year_2, by = "Name")
for (i in c(1:nrow(final_Year))){
if (is.na(final_Year[i,'ID'])){
final_Year[i,3:6] <- final_Year[i,9:12]
}
}
final_Year <- final_Year[,-c(8:12)]
return (final_Year)
}
years <- as.numeric(input$year)
final_year1 <- year_agg(df,years[1])
final_year2 <- year_agg(df,years[2])
first_output <- inner_join(final_year1, final_year2, by = c("Name","ID"),  suffix = c(paste0(".",years[1]), paste0(".",years[2])))
return (first_output)
})
observeEvent(
eventExpr = input[["submit_loc"]],
handlerExpr = {
df<-my_data()
output$table <- renderDataTable({
if (input$code == ""){
df
}
else {
id = as.numeric(input$code)
df[df$ID ==id,  ]
}
}) })
output$downloadData <- downloadHandler(
filename = function() {
("filtered.xlsx")
},
content = function(file) {
write_xlsx(my_data(), file)
}
)
})
))
runApp(
list(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar( fileInput('file1', 'Հիմնական դատան',
accept = c(".xlsx")),
fileInput('file2', 'Բոլոր կոդերով դատան',
accept = c(".xlsx")),
selectInput(inputId = "type",label="Ընտրել ժամանակահատվածը",
choices= c("Տարեկան","Եռամսյակային","Ամսեկան")),
selectInput(inputId = "year",label="Ընտրել տարին",
choices= c("2007","2008","2009","2010","2011",
"2012","2013","2014","2015",
"2016","2017","2018"),multiple = TRUE),
selectInput(inputId = "Expimp",label="Ներմուծում թե Արտահանում",
choices= c("Արտահանում","Ներմուծում")),
textInput(inputId = "code", label = "Ընտրել ապրանքի կոդը"),
actionButton(
inputId = "submit_loc",
label = "Submit"
),
br(),
br(),
downloadButton("downloadData", "Download",class="butt1")
# tags$head(tags$style(".butt1{background-color:blue;} .butt1{color: black;} .butt1{font-family: Courier New} ,butt1{align: center}"))
),
dashboardBody(
# fluidRow(
# tags$hr(),
dataTableOutput("table")
# )
))
,
server = shinyServer(function(input, output,session) {
my_data <- reactive({
inFile1 <- input$file1
if (is.null(inFile1))
return(NULL)
inFile2 <- input$file2
if (is.null(inFile2))
return(NULL)
df  <- readxl::read_xlsx(inFile1$datapath, sheet = "Armstat", col_names = TRUE) #Reading the file
colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',
'Export','Import_in_tonnas','Import')
choices <- unique(df$Year)
df$Period <- NULL
df[,2:7] <- apply(df[,2:7],2,as.numeric)
df$Export <- df$Export/1000
df$Import <- df$Import/1000
#Reading the main file
main  <- readxl::read_xlsx(inFile2$datapath, sheet = "Sheet1", col_names = FALSE)
colnames(main) <-  c('Name','ID')
main$ID<-as.numeric(main$ID)
###
#Seperating titles and assigning groups to it
titles <- main[is.na(main$ID),'Name']
counter <- 1
for (i in c(1:nrow(titles))){
titles[i,'Group'] = counter
counter = counter +1
}
##
year_agg <- function(df, Year){
df_Year <- df[df$Year == Year,]
agg_df_Year <- df_Year %>%
group_by(ID) %>%
summarise(Export_in_tonnas = sum(Export_in_tonnas),
Export = sum(Export),
Import_in_tonnas = sum(Import_in_tonnas),
Import = sum(Import))
polufinal_Year_1 <- left_join(main, agg_df_Year, by = "ID")
polufinal_Year_1['Year'] <- Year
counter <- 0
for (i in c(1:nrow(polufinal_Year_1))){
polufinal_Year_1[i,'Group'] = counter
if (is.na(polufinal_Year_1[i,'ID'])){
counter = counter +1
}
}
polufinal_Year_1[is.na(polufinal_Year_1$ID),'Group']<- NA
polufinal_Year_1[3:6][is.na(polufinal_Year_1[3:6])] <- 0
agg_total_Year <-polufinal_Year_1 %>%
group_by(Group)  %>%
summarise(Total_Export_in_tonnas = sum(Export_in_tonnas),
Total_Export = sum(Export),
Total_Import_in_tonnas = sum(Import_in_tonnas),
Total_Import = sum(Import))
agg_total_Year <- agg_total_Year[complete.cases(agg_total_Year), ]
polufinal_Year_2 <- left_join(titles, agg_total_Year, by = "Group")
polufinal_Year_2['Group'] <- NULL
final_Year <- left_join(polufinal_Year_1,polufinal_Year_2, by = "Name")
for (i in c(1:nrow(final_Year))){
if (is.na(final_Year[i,'ID'])){
final_Year[i,3:6] <- final_Year[i,9:12]
}
}
final_Year <- final_Year[,-c(8:12)]
return (final_Year)
}
years <- as.numeric(input$year)
final_year1 <- year_agg(df,years[1])
final_year2 <- year_agg(df,years[2])
first_output <- inner_join(final_year1, final_year2, by = c("Name","ID"),  suffix = c(paste0(".",years[1]), paste0(".",years[2])))
return (first_output)
})
observeEvent(
eventExpr = input[["submit_loc"]],
handlerExpr = {
df<-my_data()
output$table <- renderDataTable({
if (input$code == ""){
df
}
else {
id = as.numeric(input$code)
df[df$ID ==id,  ]
}
}) })
output$downloadData <- downloadHandler(
filename = function() {
("filtered.xlsx")
},
content = function(file) {
write_xlsx(my_data(), file)
}
)
})
))
runApp(
list(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar( fileInput('file1', 'Հիմնական դատան',
accept = c(".xlsx")),
fileInput('file2', 'Բոլոր կոդերով դատան',
accept = c(".xlsx")),
selectInput(inputId = "type",label="Ընտրել ժամանակահատվածը",
choices= c("Տարեկան","Եռամսյակային","Ամսեկան")),
selectInput(inputId = "year",label="Ընտրել տարին",
choices= c("2007","2008","2009","2010","2011",
"2012","2013","2014","2015",
"2016","2017","2018"),multiple = TRUE),
selectInput(inputId = "Expimp",label="Ներմուծում թե Արտահանում",
choices= c("Արտահանում","Ներմուծում")),
textInput(inputId = "code", label = "Ընտրել ապրանքի կոդը"),
actionButton(
inputId = "submit_loc",
label = "Submit"
),
br(),
br(),
downloadButton("downloadData", "Download",class="butt1")
# tags$head(tags$style(".butt1{background-color:blue;} .butt1{color: black;} .butt1{font-family: Courier New} ,butt1{align: center}"))
),
dashboardBody(
# fluidRow(
# tags$hr(),
dataTableOutput("table")
# )
))
,
server = shinyServer(function(input, output,session) {
my_data <- reactive({
inFile1 <- input$file1
if (is.null(inFile1))
return(NULL)
inFile2 <- input$file2
if (is.null(inFile2))
return(NULL)
df  <- readxl::read_xlsx(inFile1$datapath, sheet = "Armstat", col_names = TRUE) #Reading the file
colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',
'Export','Import_in_tonnas','Import')
choices <- unique(df$Year)
df$Period <- NULL
df[,2:7] <- apply(df[,2:7],2,as.numeric)
df$Export <- df$Export/1000
df$Import <- df$Import/1000
#Reading the main file
main  <- readxl::read_xlsx(inFile2$datapath, sheet = "Sheet1", col_names = FALSE)
colnames(main) <-  c('Name','ID')
main$ID<-as.numeric(main$ID)
###
#Seperating titles and assigning groups to it
titles <- main[is.na(main$ID),'Name']
counter <- 1
for (i in c(1:nrow(titles))){
titles[i,'Group'] = counter
counter = counter +1
}
##
year_agg <- function(df, Year){
df_Year <- df[df$Year == Year,]
agg_df_Year <- df_Year %>%
group_by(ID) %>%
summarise(Export_in_tonnas = sum(Export_in_tonnas),
Export = sum(Export),
Import_in_tonnas = sum(Import_in_tonnas),
Import = sum(Import))
polufinal_Year_1 <- left_join(main, agg_df_Year, by = "ID")
polufinal_Year_1['Year'] <- Year
counter <- 0
for (i in c(1:nrow(polufinal_Year_1))){
polufinal_Year_1[i,'Group'] = counter
if (is.na(polufinal_Year_1[i,'ID'])){
counter = counter +1
}
}
polufinal_Year_1[is.na(polufinal_Year_1$ID),'Group']<- NA
polufinal_Year_1[3:6][is.na(polufinal_Year_1[3:6])] <- 0
agg_total_Year <-polufinal_Year_1 %>%
group_by(Group)  %>%
summarise(Total_Export_in_tonnas = sum(Export_in_tonnas),
Total_Export = sum(Export),
Total_Import_in_tonnas = sum(Import_in_tonnas),
Total_Import = sum(Import))
agg_total_Year <- agg_total_Year[complete.cases(agg_total_Year), ]
polufinal_Year_2 <- left_join(titles, agg_total_Year, by = "Group")
polufinal_Year_2['Group'] <- NULL
final_Year <- left_join(polufinal_Year_1,polufinal_Year_2, by = "Name")
for (i in c(1:nrow(final_Year))){
if (is.na(final_Year[i,'ID'])){
final_Year[i,3:6] <- final_Year[i,9:12]
}
}
final_Year <- final_Year[,-c(8:12)]
return (final_Year)
}
years <- as.numeric(input$year)
final_year1 <- year_agg(df,years[1])
final_year2 <- year_agg(df,years[2])
first_output <- inner_join(final_year1, final_year2, by = c("Name","ID"),  suffix = c(paste0(".",years[1]), paste0(".",years[2])))
return (first_output)
})
observeEvent(
eventExpr = input[["submit_loc"]],
handlerExpr = {
df<-my_data()
output$table <- renderDataTable({
if (input$code == ""){
df
}
else {
id = as.numeric(input$code)
df[df$ID ==id,  ]
}
}) })
output$downloadData <- downloadHandler(
filename = function() {
("filtered.xlsx")
},
content = function(file) {
write_xlsx(my_data(), file)
}
)
})
))
df  <- readxl::read_xlsx("to_work.xlsx", sheet = "Armstat", col_names = TRUE) #Reading the file
df  <- readxl::read_xlsx("to_work.xlsx", sheet = "Armstat", col_names = TRUE) #Reading the file
library(shiny); source('shiny_prod.R')
