{
    "collab_server" : "",
    "contents" : "library(stringr)\nlibrary(utf8)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(shinydashboard)\nlibrary(rsconnect)\nlibrary(dplyr)\nlibrary(writexl)\noptions(shiny.maxRequestSize=30*1024^2) \nrunApp(\n  list(\n    ui = dashboardPage(\n      dashboardHeader(),\n      dashboardSidebar( fileInput('file1', 'Հիմնական դատան',\n                                  accept = c(\".xlsx\")),\n                        fileInput('file2', 'Բոլոր կոդերով դատան',\n                                  accept = c(\".xlsx\")),\n                        \n                        selectInput(inputId = \"type\",label=\"Ընտրել ժամանակահատվածը\",\n                                    choices= c(\"Տարեկան\",\"Եռամսյակային\",\"Ամսեկան\")),\n                        selectInput(inputId = \"year\",label=\"Ընտրել տարին\",\n                                    choices= c(\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\n                                               \"2012\",\"2013\",\"2014\",\"2015\",\n                                               \"2016\",\"2017\",\"2018\"),multiple = TRUE),\n                        selectInput(inputId = \"Expimp\",label=\"Ներմուծում թե Արտահանում\",\n                                    choices= c(\"Արտահանում\",\"Ներմուծում\")),\n                        textInput(inputId = \"code\", label = \"Ընտրել ապրանքի կոդը\"),\n                        actionButton(\n                          inputId = \"submit_loc\",\n                          label = \"Submit\"\n                        ),\n                        br(),\n                        br(),\n                        downloadButton(\"downloadData\", \"Download\",class=\"butt1\")\n                        # tags$head(tags$style(\".butt1{background-color:blue;} .butt1{color: black;} .butt1{font-family: Courier New} ,butt1{align: center}\"))\n      ),\n      \n      dashboardBody(\n        # fluidRow(\n        # tags$hr(),\n        dataTableOutput(\"table\")\n        # )\n      ))\n    ,\n    server = shinyServer(function(input, output,session) {\n      \n      \n      my_data <- reactive({\n        \n        inFile1 <- input$file1\n        \n        if (is.null(inFile1))\n          return(NULL)\n        inFile2 <- input$file2\n        \n        if (is.null(inFile2))\n          return(NULL)\n        df  <- readxl::read_xlsx(inFile1$datapath, sheet = \"Armstat\", col_names = TRUE) #Reading the file\n        colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',\n                          'Export','Import_in_tonnas','Import')\n        choices <- unique(df$Year)\n        df$Period <- NULL\n        df[,2:7] <- apply(df[,2:7],2,as.numeric)\n        df$Export <- df$Export/1000\n        df$Import <- df$Import/1000\n        #Reading the main file\n        main  <- readxl::read_xlsx(inFile2$datapath, sheet = \"Sheet1\", col_names = FALSE) \n        colnames(main) <-  c('Name','ID')\n        main$ID<-as.numeric(main$ID)\n        ###\n        \n        #Seperating titles and assigning groups to it\n        titles <- main[is.na(main$ID),'Name']\n        counter <- 1\n        for (i in c(1:nrow(titles))){\n          titles[i,'Group'] = counter\n          counter = counter +1\n        }\n        \n        ##\n        year_agg <- function(df, Year){\n          df_Year <- df[df$Year == Year,]\n          agg_df_Year <- df_Year %>%\n            group_by(ID) %>%\n            summarise(Export_in_tonnas = sum(Export_in_tonnas),\n                      Export = sum(Export),\n                      Import_in_tonnas = sum(Import_in_tonnas),\n                      Import = sum(Import))\n          polufinal_Year_1 <- left_join(main, agg_df_Year, by = \"ID\")\n          polufinal_Year_1['Year'] <- Year\n          counter <- 0\n          for (i in c(1:nrow(polufinal_Year_1))){\n            polufinal_Year_1[i,'Group'] = counter\n            \n            if (is.na(polufinal_Year_1[i,'ID'])){\n              counter = counter +1\n            }\n          }\n          polufinal_Year_1[is.na(polufinal_Year_1$ID),'Group']<- NA\n          polufinal_Year_1[3:6][is.na(polufinal_Year_1[3:6])] <- 0\n          \n          \n          agg_total_Year <-polufinal_Year_1 %>%\n            group_by(Group)  %>%\n            summarise(Total_Export_in_tonnas = sum(Export_in_tonnas),\n                      Total_Export = sum(Export),\n                      Total_Import_in_tonnas = sum(Import_in_tonnas),\n                      Total_Import = sum(Import))\n          agg_total_Year <- agg_total_Year[complete.cases(agg_total_Year), ]\n          \n          \n          polufinal_Year_2 <- left_join(titles, agg_total_Year, by = \"Group\")\n          polufinal_Year_2['Group'] <- NULL\n          final_Year <- left_join(polufinal_Year_1,polufinal_Year_2, by = \"Name\")\n          \n          for (i in c(1:nrow(final_Year))){\n            if (is.na(final_Year[i,'ID'])){\n              final_Year[i,3:6] <- final_Year[i,9:12]\n            }\n          }\n          final_Year <- final_Year[,-c(8:12)]\n          \n          \n          return (final_Year)\n        }\n        \n        years <- as.numeric(input$year)\n        final_year1 <- year_agg(df,years[1])\n        final_year2 <- year_agg(df,years[2])\n        \n        first_output <- inner_join(final_year1, final_year2, by = c(\"Name\",\"ID\"),  suffix = c(paste0(\".\",years[1]), paste0(\".\",years[2])))\n        \n        return (first_output)\n      })\n      \n      observeEvent(\n        eventExpr = input[[\"submit_loc\"]],\n        handlerExpr = {\n          df<-my_data()\n          output$table <- renderDataTable({\n            if (input$code == \"\"){\n              df\n            }\n            else {\n              id = as.numeric(input$code)\n              df[df$ID ==id,  ]\n            }\n            \n          }) })\n      output$downloadData <- downloadHandler(\n        filename = function() {\n          (\"filtered.xlsx\")\n        },\n        content = function(file) {\n          write_xlsx(my_data(), file)\n        }\n      )\n      \n    })\n  ))\n",
    "created" : 1535460753383.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "670242841",
    "id" : "CB11A170",
    "lastKnownWriteTime" : 1535460883,
    "last_content_update" : 1535460883525,
    "path" : "~/Desktop/Min Economy/Final Project/final1.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}