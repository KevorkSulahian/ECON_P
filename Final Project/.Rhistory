runApp(
list(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(
tags$head(
tags$style(HTML(
'
#tabs {display: grid;
text-align: center;}
'
))
),
fileInput('file1', 'ÕÕ«Õ´Õ¶Õ¡Õ¯Õ¡Õ¶ Õ¤Õ¡Õ¿Õ¡Õ¶',
accept = c(".xlsx")),
fileInput('file2', 'Ô²Õ¸Õ¬Õ¸Ö Õ¯Õ¸Õ¤Õ¥ÖÕ¸Õ¾ Õ¤Õ¡Õ¿Õ¡Õ¶',
accept = c(".xlsx")),
tabsetPanel(id = 'first_ch',
tabPanel("ÕÖÕ¸Õ¶Õ¸ÖÕ´", fluid=TRUE,
selectInput(inputId = "Expimp",label="ÕÕ¥ÖÕ´Õ¸ÖÕ®Õ¸ÖÕ´ Õ©Õ¥ Ô±ÖÕ¿Õ¡Õ°Õ¡Õ¶Õ¸ÖÕ´",
choices= c("Ô±ÖÕ¿Õ¡Õ°Õ¡Õ¶Õ¸ÖÕ´","ÕÕ¥ÖÕ´Õ¸ÖÕ®Õ¸ÖÕ´")),
tabsetPanel(id = "tabs",
tabPanel("ÕÕ¡ÖÕ¥Õ¯Õ¡Õ¶", fluid = F,
selectInput(inputId = "year",label="Ô¸Õ¶Õ¿ÖÕ¥Õ¬ Õ¿Õ¡ÖÕ«Õ¶",
choices= c("2007","2008","2009","2010","2011",
"2012","2013","2014","2015",
"2016","2017","2018", "2019"),multiple = TRUE)
),
tabPanel("Ô±Õ´Õ½Õ¡Õ¯Õ¡Õ¶", fluid = F,
selectInput(inputId =  "Monthly", label = "Ô¸Õ¶Õ¿ÖÕ¥Ö Õ¶Õ¥ÖÕ¯Õ¡ÕµÕ¡ÖÕ´Õ¡Õ¶ Õ¿Õ¥Õ½Õ¡Õ¯Õ¨",
choices =c("Ô³Õ¸ÖÕ´Õ¡ÖÕ¡ÕµÕ«Õ¶","Ô±Õ´Õ¥Õ¶ Õ¡Õ´Õ½ÕµÕ¡")),
selectInput(inputId = "year_m",label="Ô¸Õ¶Õ¿ÖÕ¥Õ¬ Õ¿Õ¡ÖÕ«Õ¶",
choices= c("2007","2008","2009","2010","2011", "2012","2013","2014","2015", "2016","2017","2018", "2019")
,multiple = TRUE),
selectInput(inputId = "month_m", label = "Ô¸Õ¶Õ¿ÖÕ¥Õ¬ Ô±Õ´Õ«Õ½Õ¨",
choices = c("ÕÕ¸ÖÕ¶Õ¾Õ¡Ö","ÕÕ¥Õ¿ÖÕ¾Õ¡Ö","ÕÕ¡ÖÕ¿","Ô±ÕºÖÕ«Õ¬","ÕÕ¡ÕµÕ«Õ½","ÕÕ¸ÖÕ¶Õ«Õ½","ÕÕ¸ÖÕ¬Õ«Õ½"
,"ÕÕ£Õ¸Õ½Õ¿Õ¸Õ½","ÕÕ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö",
"ÕÕ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö","ÕÕ¸ÕµÕ¥Õ´Õ¢Õ¥Ö","Ô´Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö"),multiple = TRUE)
# textInput(inputId = "code_m", label = "Ô¸Õ¶Õ¿ÖÕ¥Õ¬ Õ¡ÕºÖÕ¡Õ¶ÖÕ« Õ¯Õ¸Õ¤Õ¨")
),
tabPanel("ÔµÕ¼Õ¡Õ´Õ½ÕµÕ¡Õ¯Õ¡ÕµÕ«Õ¶", fluid = F,
selectInput(inputId = "year_t",label="Ô¸Õ¶Õ¿ÖÕ¥Õ¬ Õ¿Õ¡ÖÕ«Õ¶",
choices= c("2007","2008","2009","2010","2011",
"2012","2013","2014","2015",
"2016","2017","2018", "2019"),multiple = TRUE),
selectInput(inputId = "three",label="Ô¸Õ¶Õ¿ÖÕ¥Õ¬ Õ¥Õ¼Õ¡Õ´Õ½ÕµÕ¡Õ¯",
choices= c("Ô±Õ¼Õ¡Õ»Õ«Õ¶","ÔµÖÕ¯ÖÕ¸ÖÕ¤","ÔµÖÖÕ¸ÖÕ¤","ÕÕ¸ÖÖÕ¸ÖÕ¤"))
),
textInput(inputId = "code", label = "Ô¸Õ¶Õ¿ÖÕ¥Õ¬ Õ¡ÕºÖÕ¡Õ¶ÖÕ« Õ¯Õ¸Õ¤Õ¨")
)
),
tabPanel("Ô³ÖÕ¡ÖÕ«Õ¯Õ¶Õ¥Ö",
selectizeInput("names_p", "Name of product",choices=NULL, options = list(maxItems=1)),
selectInput("variables_p", "Choose variable", choices = c("Export_in_tonnas",
"Export","Import_in_tonnas","Import")))),
actionButton(
inputId = "submit_loc",
label = "Submit"
),
br(),
br(),
downloadButton("downloadData", "Download",class="butt1")),
dashboardBody(
tabsetPanel(id = "page2",
tabPanel("tab1",
dataTableOutput("table"),
plotOutput("plot1")
),
tabPanel("tab2",
dataTableOutput("table2")
)
)
# fluidRow(
# tags$hr(),
# )
))
,
server = shinyServer(function(input, output,session) {
## Year AGG function 1
year_agg <- function(df, Year,main){
#### getting names without ID
titles <- main[is.na(main$ID),'Name']
counter <- 1
# giving group ID
for (i in c(1:nrow(titles))){
titles[i,'Group'] = counter
counter = counter +1
}
#####
# getting by year
df_Year <- df[df$Year == Year,]
# group by ID
agg_df_Year <- df_Year %>%
group_by(ID) %>%
summarise(Export_in_tonnas = sum(Export_in_tonnas),
Export = sum(Export),
Import_in_tonnas = sum(Import_in_tonnas),
Import = sum(Import))
# join main and add_df_year
polufinal_Year_1 <- left_join(main, agg_df_Year, by = "ID")
polufinal_Year_1['Year'] <- Year
# id based on group
counter <- 0
for (i in c(1:nrow(polufinal_Year_1))){
polufinal_Year_1[i,'Group'] = counter
if (is.na(polufinal_Year_1[i,'ID'])){
counter = counter + 1
}
}
#deleting rows without id
polufinal_Year_1[is.na(polufinal_Year_1$ID),'Group']<- NA
# change number to 0 for rows with insufficent data
polufinal_Year_1[3:6][is.na(polufinal_Year_1[3:6])] <- 0
# group by group
agg_total_Year <-polufinal_Year_1 %>%
group_by(Group)  %>%
summarise(Total_Export_in_tonnas = sum(Export_in_tonnas),
Total_Export = sum(Export),
Total_Import_in_tonnas = sum(Import_in_tonnas),
Total_Import = sum(Import))
agg_total_Year <- agg_total_Year[complete.cases(agg_total_Year), ]
#######################################################
################################## one group is being deleted
polufinal_Year_2 <- left_join(titles, agg_total_Year, by = "Group")
polufinal_Year_2['Group'] <- NULL
final_Year <- left_join(polufinal_Year_1,polufinal_Year_2, by = "Name")
for (i in c(1:nrow(final_Year))){
if (is.na(final_Year[i,'ID'])){
final_Year[i,3:6] <- final_Year[i,9:12]
}
}
final_Year <- final_Year[,-c(8:12)]
year<- final_Year$Year[1]
final_Year$Year <- NULL
colnames(final_Year) <- c("Name","ID",paste0(colnames(final_Year[,c(3:6)]), ".",year))
return (final_Year)
} ##### Year agg ends here
## Get main function 2
get_main <- function(){
########Reading the main file
inFile2 <- input$file2
main  <- readxl::read_xlsx(inFile2$datapath ,sheet = 1, col_names = FALSE)
colnames(main) <-  c('Name','ID')
main$ID<-as.numeric(main$ID)
## filling absent data
main[main$ID==9701 & !(is.na(main$ID)),'Name']  <- "ÕÕ¥Õ¼ÖÕ¸Õ¾ Õ¡ÖÕ¾Õ¡Õ® Õ¶Õ¯Õ¡Ö"
main[main$ID==9702 & !(is.na(main$ID)),'Name']  <- "ÕÕ¸ÖÕ¡Õ£ÖÕ¡Õ¶Õ¯Õ¡ÖÕ«, Ô·Õ½Õ¿Õ¡Õ´ÕºÕ«, Õ¾Õ«Õ¶Õ¡Õ¿ÕºÕ¸ÖÕ©ÕµÕ¡Õ¶ Õ¢Õ¶ÖÖÕ«Õ¶Õ¡Õ¯Õ¶Õ¥Ö"
main[main$ID==9704 & !(is.na(main$ID)),'Name']  <- "ÕÕ¡Õ¶Õ¤Õ¡Õ¯Õ¶Õ¥ÖÕ«, Õ¡ÖÕ±Õ¡Õ¶Õ«Õ¯Õ¶Õ¥ÖÕ« Õ¢Õ¶ÖÖÕ«Õ¶Õ¡Õ¯Õ¶Õ¥Ö	"
main[main$ID==9703 & !(is.na(main$ID)),'Name']  <- "ÕÕ¡Õ´Õ¡Õ¯Õ¡Õ¶Õ«Õ· Õ¯Õ¡Õ´ ÕºÕ¥Õ¿Õ¡Õ¯Õ¡Õ¶ Õ¿Õ¸ÖÖÖÕ« Õ¤ÖÕ¸Õ·Õ´Õ¡Õ¶Õ«Õ·"
main[main$ID==9706 & !(is.na(main$ID)),'Name']  <- "ÕÕ¡Õ¾Õ¡ÖÕ¡Õ®Õ¸Ö Õ¯Õ¡Õ´ Õ°Õ¡Õ¾Õ¡ÖÕ¡Õ®Õ¸ÖÕ« Õ¡Õ¼Õ¡ÖÕ¯Õ¡Õ¶Õ¥Ö"
main[main$ID==9705 & !(is.na(main$ID)),'Name']  <- "ÕÕ¶Õ¡Õ¸Õ³ Õ«ÖÕ¥Ö 100Õ«Ö Õ¡Õ¾Õ¥Õ¬Õ« Õ¿Õ¡ÖÕ«ÖÕ¸Õ¾"
return (main)
}
### get main ends here
## Get Columns function 3
get_columns <- function(df,exp_imp){
if (exp_imp=="Ô±ÖÕ¿Õ¡Õ°Õ¡Õ¶Õ¸ÖÕ´"){
return(df[,c("Name","ID",grep('Export', colnames(df), value=TRUE))])
}
else if (exp_imp=="ÕÕ¥ÖÕ´Õ¸ÖÕ®Õ¸ÖÕ´"){
return(df[,c("Name","ID",grep('Import', colnames(df), value=TRUE))])
}
}
### get columns function 4
## tremester periods function 5
tremester_periods <- function(df, quart){
if (quart=="Ô±Õ¼Õ¡Õ»Õ«Õ¶"){
df1 <- df[df$Period %in% c(1,2,3),]
}
else if (quart=="ÔµÖÕ¯ÖÕ¸ÖÕ¤"){
df1 <- df[df$Period %in% c(4,5,6),]
}
else if (quart=="ÔµÖÖÕ¸ÖÕ¤"){
df1 <- df[df$Period %in% c(7,8,9),]
}
else if (quart=="ÕÕ¸ÖÖÕ¸ÖÕ¤"){
df1 <- df[df$Period %in% c(10,11,12),]
}
return (df1)
}
# function 5 ends here
# returns the names of the second data
choice <- reactive({
inFile2 <- input$file2
if (is.null(inFile2))
return(NULL)
main1 <- get_main()
choices <- unique(main1$Name)
return (choices)
})
my_data2 <- reactive({
main <- get_main()
main$group = 0
group = 0
for (i in c(1:1244)) {
if (is.na(main$ID[i])) {
group = 1 + group
}
main$group[i] = group
}
return(main)
})
# MY DATA
my_data <- reactive({
inFile1 <- input$file1
if (is.null(inFile1))
return(NULL)
inFile2 <- input$file2 ### check what hapens here
if (is.null(inFile2))
return(NULL)
# I have no idea how this works
df  <- readxl::read_xlsx(inFile1$datapath, sheet = 1, col_names = TRUE) #Reading the file
colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',
'Export','Import_in_tonnas','Import')
# Turn all into numeric
df[,2:8] <- apply(df[,2:8],2,as.numeric)
df$Export <- df$Export/1000
df$Import <- df$Import/1000
#Reading the main file
main <- get_main()
###
## IF Yearly
if(input$tabs=="ÕÕ¡ÖÕ¥Õ¯Õ¡Õ¶"){
#delte the month
df$Period <- NULL
agg1 <- df
# get the year
years <- as.numeric(input$year)
fin_y <- main
for (year in years){
temp <- year_agg(agg1, year,main)
fin_y <- inner_join(fin_y, temp, by = c("Name","ID"))
}
fin_y1 <- get_columns(fin_y,input$Expimp)
empty <- which(is.na(fin_y1$ID))
x <- rep(NA, ncol(fin_y1))
x[1] <- "All"
x[2] <- 0
x[-c(1,2)]<- c(colSums(fin_y1[empty, -c(1,2)]))
x<- t(as.data.frame(x))
x[-1]<-lapply(x[-1],as.numeric)
x<-as.data.frame(x) #
colnames(x) <- c(colnames(fin_y1))
test <- rbind(x,fin_y1)
return (test)
}
## If monthly
else if(input$tabs=="Ô±Õ´Õ½Õ¡Õ¯Õ¡Õ¶"){
month_per <- data.frame(Month = c("ÕÕ¸ÖÕ¶Õ¾Õ¡Ö","ÕÕ¥Õ¿ÖÕ¾Õ¡Ö","ÕÕ¡ÖÕ¿","Ô±ÕºÖÕ«Õ¬","ÕÕ¡ÕµÕ«Õ½","ÕÕ¸ÖÕ¶Õ«Õ½","ÕÕ¸ÖÕ¬Õ«Õ½"
,"ÕÕ£Õ¸Õ½Õ¿Õ¸Õ½","ÕÕ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö",
"ÕÕ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö","ÕÕ¸ÕµÕ¥Õ´Õ¢Õ¥Ö","Ô´Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö"),
Period = rep(1:12))
if (input$Monthly == "Ô³Õ¸ÖÕ´Õ¡ÖÕ¡ÕµÕ«Õ¶"){
per <- month_per[month_per$Month==input$month_m,"Period"]
agg1 <- df[df$Period <= per,]
years <- as.numeric(input$year_m)
agg1$Period <- NULL
fin_m <- main
for (year in years){
temp <- year_agg(agg1, year,main)
fin_m <- inner_join(fin_m, temp, by = c("Name","ID"))
}
fin_m1 <- get_columns(fin_m,input$Expimp)
empty <- which(is.na(fin_m1$ID))
x <- rep(NA, ncol(fin_m1))
x[1] <- "All"
x[2] <- 0
x[-c(1,2)]<- c(colSums(fin_m1[empty, -c(1,2)]))
x<- t(as.data.frame(x))
x[-1]<-lapply(x[-1],as.numeric)
x<-as.data.frame(x) #
colnames(x) <- c(colnames(fin_m1))
test <- rbind(x,fin_m1)
return (test)
}
if (input$Monthly == "Ô±Õ´Õ¥Õ¶ Õ¡Õ´Õ½ÕµÕ¡"){
per <- month_per[month_per$Month %in% input$month_m,"Period"]
# df$Year %in% as.numeric(input$year_m)
agg2 <- df[df$Period %in% per &
df$Year %in% as.numeric(input$year_m),]
# fin_m1 <- get_columns(agg2,input$Expimp)
agg2 <- merge(agg2[-c(1)], main,by = "ID")
agg2 <- agg2[c(8,1,2,3,4,5,6,7)]
colnames(agg2) <- c("Ô¿Õ¥Õ¶Õ¤Õ¡Õ¶Õ« Õ¯Õ¥Õ¶Õ¤Õ¡Õ¶Õ«Õ¶Õ¥Ö Ö Õ¯Õ¥Õ¶Õ¤Õ¡Õ¶Õ¡Õ¯Õ¡Õ¶ Õ®Õ¡Õ£Õ´Õ¡Õ¶ Õ¡ÖÕ¿Õ¡Õ¤ÖÕ¡Õ¶Ö",
"id"
,"year","period",
"Export_in_tonnas" ,"Export",
"Import_in_tonnas","Import")
agg2$year <- as.character(agg2$year)
agg2$period <- as.character(agg2$period)
agg3 <- agg2
# Export_in_tonnas
agg2 <- agg3[c(1:4,5)]
pls <- expand.grid(id = unique(agg2$id), period = c(as.character(unique(agg2$period)))) %>%
mutate(period = as.character(period)) %>%
left_join(agg2, by = c('id', 'period')) %>%
spread(key = period, value = c(Export_in_tonnas), fill = 0)
complete <- NULL
for (i in (colnames(pls[-c(1,2,3)]))) {
name <- paste0("Export_in_tonnas ", i)
complete <- append(complete,name)
}
colnames(pls) <-c(colnames(pls[c(1:3)]), complete)
# Export
agg2 <- agg3[c(1:4,6)]
pls2 <- expand.grid(id = unique(agg2$id), period = c(as.character(unique(agg2$period)))) %>%
mutate(period = as.character(period)) %>%
left_join(agg2, by = c('id', 'period')) %>%
spread(key = period, value = c(Export), fill = 0)
complete <- NULL
for (i in (colnames(pls2[-c(1,2,3)]))) {
name <- paste0("Export ", i)
complete <- append(complete,name)
}
colnames(pls2) <-c(colnames(pls2[c(1:3)]), complete)
# Import_in_tonnas
agg2 <- agg3[c(1:4,7)]
pls3 <- expand.grid(id = unique(agg2$id), period = c(as.character(unique(agg2$period)))) %>%
mutate(period = as.character(period)) %>%
left_join(agg2, by = c('id', 'period')) %>%
spread(key = period, value = c(Import_in_tonnas), fill = 0)
complete <- NULL
for (i in (colnames(pls3[-c(1,2,3)]))) {
name <- paste0("Import_in_tonnas ", i)
complete <- append(complete,name)
}
colnames(pls3) <-c(colnames(pls3[c(1:3)]), complete)
# Import
agg2 <- agg3[c(1:4,8)]
pls4 <- expand.grid(id = unique(agg2$id), period = c(as.character(unique(agg2$period)))) %>%
mutate(period = as.character(period)) %>%
left_join(agg2, by = c('id', 'period')) %>%
spread(key = period, value = c(Import), fill = 0)
complete <- NULL
for (i in (colnames(pls4[-c(1,2,3)]))) {
name <- paste0("import ", i)
complete <- append(complete,name)
}
colnames(pls4) <-c(colnames(pls4[c(1:3)]), complete)
# bind bitches
complete_data <- merge(pls,pls2[-2], by = c("id", "year"))
complete_data <- merge(complete_data,pls3[-2], by = c("id", "year"))
complete_data <- merge(complete_data,pls4[-2], by = c("id", "year"))
complete_data <- complete_data[complete.cases(complete_data),]
return (complete_data)
}
}
## if quartly
else if(input$tabs=="ÔµÕ¼Õ¡Õ´Õ½ÕµÕ¡Õ¯Õ¡ÕµÕ«Õ¶"){
agg1 <- tremester_periods(df, input$three)
agg1$Period<-NULL
fin_t <- main
years <- as.numeric(input$year_t)
for (year in years){
temp <- year_agg(agg1, year,main)
fin_t <- inner_join(fin_t, temp, by = c("Name","ID"))
}
fin_t1 <- get_columns(fin_t,input$Expimp)
empty <- which(is.na(fin_t1$ID))
x <- rep(NA, ncol(fin_t1))
x[1] <- "All"
x[2] <- 0
x[-c(1,2)]<- c(colSums(fin_t1[empty, -c(1,2)]))
x<- t(as.data.frame(x))
x[-1]<-lapply(x[-1],as.numeric)
x<-as.data.frame(x) #
colnames(x) <- c(colnames(fin_t1))
test <- rbind(x,fin_t1)
return (test)
}
})
#MY DATA ends here
# AGG DATA
agg_data <- reactive({
df <- my_data()
if (input$code == ""){
return (df)
}
else {
text <- input$code
if  (grepl(',', text)){
code1 <- unlist(strsplit(text,','))
} else if (grepl('-',text)){
code1 <- unlist(strsplit(text,'-'))
code1 <- seq(as.numeric(code1[1]),as.numeric(code1[2]))
}
else {
code1 <- as.numeric(text)
}
return (df[df$ID %in% code1,  ])
}
})
## AGG DATA ends here
# Plot data
plot_data <- reactive({
inFile1 <- input$file1
if (is.null(inFile1))
return(NULL)
inFile2 <- input$file2
if (is.null(inFile2))
return(NULL)
df  <- readxl::read_xlsx(inFile1$datapath, sheet = 1, col_names = TRUE) #Reading the file
colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',
'Export','Import_in_tonnas','Import')
df[,2:8] <- apply(df[,2:8],2,as.numeric)
df$Export <- df$Export/1000
df$Import <- df$Import/1000
main  <- readxl::read_xlsx(inFile2$datapath ,sheet = 1, col_names = FALSE)
colnames(main) <-  c('Name','ID')
main$ID<-as.numeric(main$ID)
main[main$ID==9701 & !(is.na(main$ID)),'Name']  <- "ÕÕ¥Õ¼ÖÕ¸Õ¾ Õ¡ÖÕ¾Õ¡Õ® Õ¶Õ¯Õ¡Ö"
main[main$ID==9702 & !(is.na(main$ID)),'Name']  <- "ÕÕ¸ÖÕ¡Õ£ÖÕ¡Õ¶Õ¯Õ¡ÖÕ«, Ô·Õ½Õ¿Õ¡Õ´ÕºÕ«, Õ¾Õ«Õ¶Õ¡Õ¿ÕºÕ¸ÖÕ©ÕµÕ¡Õ¶ Õ¢Õ¶ÖÖÕ«Õ¶Õ¡Õ¯Õ¶Õ¥Ö"
main[main$ID==9704 & !(is.na(main$ID)),'Name']  <- "ÕÕ¡Õ¶Õ¤Õ¡Õ¯Õ¶Õ¥ÖÕ«, Õ¡ÖÕ±Õ¡Õ¶Õ«Õ¯Õ¶Õ¥ÖÕ« Õ¢Õ¶ÖÖÕ«Õ¶Õ¡Õ¯Õ¶Õ¥Ö	"
main[main$ID==9703 & !(is.na(main$ID)),'Name']  <- "ÕÕ¡Õ´Õ¡Õ¯Õ¡Õ¶Õ«Õ· Õ¯Õ¡Õ´ ÕºÕ¥Õ¿Õ¡Õ¯Õ¡Õ¶ Õ¿Õ¸ÖÖÖÕ« Õ¤ÖÕ¸Õ·Õ´Õ¡Õ¶Õ«Õ·"
main[main$ID==9706 & !(is.na(main$ID)),'Name']  <- "ÕÕ¡Õ¾Õ¡ÖÕ¡Õ®Õ¸Ö Õ¯Õ¡Õ´ Õ°Õ¡Õ¾Õ¡ÖÕ¡Õ®Õ¸ÖÕ« Õ¡Õ¼Õ¡ÖÕ¯Õ¡Õ¶Õ¥Ö"
main[main$ID==9705 & !(is.na(main$ID)),'Name']  <- "ÕÕ¶Õ¡Õ¸Õ³ Õ«ÖÕ¥Ö 100Õ«Ö Õ¡Õ¾Õ¥Õ¬Õ« Õ¿Õ¡ÖÕ«ÖÕ¸Õ¾"
rep_main <- data.frame("Name" = rep(main$Name, 11),"ID"=rep(main$ID, 11))
rep_main$Year <- 0
year_1 <- data.frame("Year"=c(2007:2019), "i"=c(1:11))
for (i in c(0:10)){
rep_main$Year[(i *1244): ((i+1)*1244)] <- year_1[i+1,"Year"]
}
titles <- main[is.na(main$ID),'Name']
counter <- 1
for (i in c(1:nrow(titles))){
titles[i,'Group'] = counter
counter = counter +1
}
test1 <- df %>%
filter(Year != 2018) %>%
group_by(ID,Year) %>%
summarise(Export_in_tonnas = sum(Export_in_tonnas),
Export = sum(Export),
Import_in_tonnas = sum(Import_in_tonnas),
Import = sum(Import))
test2 <- left_join(rep_main, test1, by = c("ID","Year"))
test2[4:7][is.na(test2[4:7])] <- 0
counter <- 0
for (i in c(1:nrow(test2))){
if ((i-1)%%1244==0) {
counter = 0
}
if (is.na(test2[i,'ID'])) {
counter = counter +1
}
test2[i,'Group'] = counter
}
unique(test2$Group)
cat <- test2 %>%
group_by(Group, Year) %>%
summarise(Export_in_tonnas1 = sum(Export_in_tonnas),
Export1 = sum(Export),
Import_in_tonnas1 = sum(Import_in_tonnas),
Import1 = sum(Import))
test3 <- left_join(titles, cat, by = "Group")
test3['Group'] <- NULL
test2$Name <- as.character(test2$Name)
final <- left_join(test2,test3, by = c("Name","Year"))
for (i in c(1:nrow(final))){
if (is.na(final[i,'ID'])){
final[i,4:7] <- final[i,9:12]
}
}
final <- final[,-c(8:12)]
return (final)
})
## Plot data ends here
## Observe 1
observe({
updateSelectizeInput(session,"names_p", choices=choice()) # choice = get_main$Name
})
## Observe event
observeEvent(
eventExpr = input[["submit_loc"]],
handlerExpr = {
output$table2 <- renderDataTable({
my_data2();
})
if (input$first_ch=="ÕÖÕ¸Õ¶Õ¸ÖÕ´"){
output$table <- renderDataTable({
agg_data();
})}
else if (input$first_ch == "Ô³ÖÕ¡ÖÕ«Õ¯Õ¶Õ¥Ö"){
output$plot1 <- renderPlot({
plot_dat1 <- plot_data()
names <- as.character(input$names_p)
variables <- as.character(input$variables_p)
variables <- c(variables, "Year","Name")
if (!(is.na(names))){
temp  <- plot_dat1[plot_dat1$Name %in% c(names),variables]
# print(colnames(temp))
ggplot(temp) +
geom_point(aes(x=temp[,2],y=temp[,1]), color="Red")+
geom_line(aes(x=temp[,2],y=temp[,1])) +
scale_x_discrete(name ="Year",limits=c(2007:2017)) + labs(title=input$names_p)+
ylab(as.character(input$variables_p))
}
})
}
})
## Observe event ends here
output$downloadData <- downloadHandler(
filename = function() {
("filtered.xlsx")
},
content = function(file) {
write_xlsx(agg_data(), file)
}
)
# output ends here
})
))
