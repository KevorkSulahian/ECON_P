{
    "collab_server" : "",
    "contents" : "library(stringr)\nlibrary(utf8)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(shinydashboard)\nlibrary(rsconnect)\nlibrary(dplyr)\nlibrary(writexl)\noptions(shiny.maxRequestSize=30*1024^2) \nrunApp(\n  list(\n    ui = dashboardPage(\n      dashboardHeader(),\n      dashboardSidebar( \n        fileInput('file1', 'Հիմնական դատան',\n                  accept = c(\".xlsx\")),\n        fileInput('file2', 'Բոլոր կոդերով դատան',\n                  accept = c(\".xlsx\")),\n        tabsetPanel(id = 'first_ch',\n          \n        \n        \n        \n        tabPanel(\"Որոնում\", fluid=TRUE,\n        selectInput(inputId = \"Expimp\",label=\"Ներմուծում թե Արտահանում\",\n                    choices= c(\"Արտահանում\",\"Ներմուծում\")),\n        tabsetPanel(id = \"tabs\",\n          tabPanel(\"Տարեկան\", fluid = TRUE,\n                   \n                   \n                   selectInput(inputId = \"year\",label=\"Ընտրել տարին\",\n                               choices= c(\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\n                                          \"2012\",\"2013\",\"2014\",\"2015\",\n                                          \"2016\",\"2017\",\"2018\"),multiple = TRUE)\n                   \n                   \n                   \n                   \n          ),\n          tabPanel(\"Ամսեկան\", fluid = TRUE,\n                   selectInput(inputId =  \"Monthly\", label = \"Ընտրեք ներկայացման տեսակը\",\n                               choices =c(\"Գումարային\",\"Ամեն ամսյա\")),\n                   selectInput(inputId = \"year_m\",label=\"Ընտրել տարին\",\n                               choices= c(\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\n                                          \"2012\",\"2013\",\"2014\",\"2015\",\n                                          \"2016\",\"2017\",\"2018\"),multiple = TRUE),\n                   selectInput(inputId = \"month_m\", label = \"Ընտրել Ամիսը\",\n                               choices = c(\"Հունվար\",\"Փետրվար\",\"Մարտ\",\"Ապրիլ\",\"Մայիս\",\"Հունիս\",\"Հուլիս\"\n                                           ,\"Օգոստոս\",\"Սեպտեմբեր\",\n                                                  \"Հոկտեմբեր\",\"Նոյեմբեր\",\"Դեկտեմբեր\"),multiple = TRUE)\n                   # textInput(inputId = \"code_m\", label = \"Ընտրել ապրանքի կոդը\")\n                   \n                   \n          ),\n          tabPanel(\"Եռամսյակային\", fluid = TRUE,\n                   \n                   selectInput(inputId = \"year_t\",label=\"Ընտրել տարին\",\n                               choices= c(\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\n                                          \"2012\",\"2013\",\"2014\",\"2015\",\n                                          \"2016\",\"2017\",\"2018\"),multiple = TRUE),\n                   selectInput(inputId = \"three\",label=\"Ընտրել եռամսյակ\",\n                               choices= c(\"Առաջին\",\"Երկրորդ\",\"Երրորդ\",\"Չորրորդ\"))\n                   \n                   \n                   \n                   \n          ),\n          textInput(inputId = \"code\", label = \"Ընտրել ապրանքի կոդը\")\n        )\n        \n      ),\n      tabPanel(\"Գրաֆիկներ\",\n               selectizeInput(\"names_p\", \"Name of product\",choices=NULL, options = list(maxItems=1)),\n               selectInput(\"variables_p\", \"Choose variable\", choices = c(\"Export_in_tonnas\",\n                                                                         \"Export\",\"Import_in_tonnas\",\"Import\")))),\n      actionButton(\n        inputId = \"submit_loc\",\n        label = \"Submit\"\n      ),\n      \n      br(),\n      br(),\n      downloadButton(\"downloadData\", \"Download\",class=\"butt1\")),\n      \n      dashboardBody(\n        # fluidRow(\n        # tags$hr(),\n        dataTableOutput(\"table\"),\n        plotOutput(\"plot1\")\n        # )\n      ))\n    ,\n    server = shinyServer(function(input, output,session) {\n      year_agg <- function(df, Year,main){\n        ####\n        titles <- main[is.na(main$ID),'Name']\n        counter <- 1\n        for (i in c(1:nrow(titles))){\n          titles[i,'Group'] = counter\n          counter = counter +1\n        }\n        #####\n        df_Year <- df[df$Year == Year,]\n        agg_df_Year <- df_Year %>%\n          group_by(ID) %>%\n          summarise(Export_in_tonnas = sum(Export_in_tonnas),\n                    Export = sum(Export),\n                    Import_in_tonnas = sum(Import_in_tonnas),\n                    Import = sum(Import))\n        polufinal_Year_1 <- left_join(main, agg_df_Year, by = \"ID\")\n        polufinal_Year_1['Year'] <- Year\n        counter <- 0\n        for (i in c(1:nrow(polufinal_Year_1))){\n          polufinal_Year_1[i,'Group'] = counter\n          \n          if (is.na(polufinal_Year_1[i,'ID'])){\n            counter = counter + 1\n          }\n        }\n        polufinal_Year_1[is.na(polufinal_Year_1$ID),'Group']<- NA\n        polufinal_Year_1[3:6][is.na(polufinal_Year_1[3:6])] <- 0\n        \n        \n        agg_total_Year <-polufinal_Year_1 %>%\n          group_by(Group)  %>%\n          summarise(Total_Export_in_tonnas = sum(Export_in_tonnas),\n                    Total_Export = sum(Export),\n                    Total_Import_in_tonnas = sum(Import_in_tonnas),\n                    Total_Import = sum(Import))\n        agg_total_Year <- agg_total_Year[complete.cases(agg_total_Year), ]\n        \n        \n        polufinal_Year_2 <- left_join(titles, agg_total_Year, by = \"Group\")\n        polufinal_Year_2['Group'] <- NULL\n        final_Year <- left_join(polufinal_Year_1,polufinal_Year_2, by = \"Name\")\n        \n        for (i in c(1:nrow(final_Year))){\n          if (is.na(final_Year[i,'ID'])){\n            final_Year[i,3:6] <- final_Year[i,9:12]\n          }\n        }\n        final_Year <- final_Year[,-c(8:12)]\n        year<- final_Year$Year[1]\n        final_Year$Year <- NULL\n        colnames(final_Year) <- c(\"Name\",\"ID\",paste0(colnames(final_Year[,c(3:6)]), \".\",year))\n        \n        return (final_Year)\n      }\n      get_main <- function(){\n        ########Reading the main file\n        inFile2 <- input$file2\n        main  <- readxl::read_xlsx(inFile2$datapath ,sheet = 1, col_names = FALSE) \n        colnames(main) <-  c('Name','ID')\n        main$ID<-as.numeric(main$ID)\n        \n        main[main$ID==9701 & !(is.na(main$ID)),'Name']  <- \"Ձեռքով արված նկար\"\n        main[main$ID==9702 & !(is.na(main$ID)),'Name']  <- \"Փորագրանկարի, Էստամպի, վինատպության բնօրինակներ\"\n        main[main$ID==9704 & !(is.na(main$ID)),'Name']  <- \"Քանդակների, արձանիկների բնօրինակներ\t\"\n        main[main$ID==9703 & !(is.na(main$ID)),'Name']  <- \"Նամականիշ կամ պետական տուրքի դրոշմանիշ\"\n        main[main$ID==9706 & !(is.na(main$ID)),'Name']  <- \"Հավաքածու կամ հավաքածուի առարկաներ\"\n        main[main$ID==9705 & !(is.na(main$ID)),'Name']  <- \"Հնաոճ իրեր 100ից ավելի տարիքով\"\n        return (main)\n      }\n      get_columns <- function(df,exp_imp){\n        if (exp_imp==\"Արտահանում\"){\n          return(df[,c(\"Name\",\"ID\",grep('Export', colnames(df), value=TRUE))])\n        }\n        else if (exp_imp==\"Ներմուծում\"){\n          return(df[,c(\"Name\",\"ID\",grep('Import', colnames(df), value=TRUE))])\n        }\n        \n      }\n      tremester_periods <- function(df, quart){\n        if (quart==\"Առաջին\"){\n          df1 <- df[df$Period %in% c(1,2,3),]\n        }\n        else if (quart==\"Երկրորդ\"){\n          df1 <- df[df$Period %in% c(4,5,6),]\n        }\n        else if (quart==\"Երրորդ\"){\n          df1 <- df[df$Period %in% c(7,8,9),]\n        }\n        else if (quart==\"Չորրորդ\"){\n          df1 <- df[df$Period %in% c(10,11,12),]\n        }\n        return (df1)\n      }\n      choice <- reactive({\n        inFile2 <- input$file2\n        \n        if (is.null(inFile2))\n          return(NULL)\n        main1 <- get_main()\n        choices <- unique(main1$Name)\n        return (choices)\n      })\n      \n      my_data <- reactive({\n        \n        inFile1 <- input$file1\n        \n        if (is.null(inFile1))\n          return(NULL)\n        inFile2 <- input$file2\n        \n        if (is.null(inFile2))\n          return(NULL)\n        df  <- readxl::read_xlsx(inFile1$datapath, sheet = \"Armstat\", col_names = TRUE) #Reading the file\n        colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',\n                          'Export','Import_in_tonnas','Import')\n        \n        df[,2:8] <- apply(df[,2:8],2,as.numeric)\n        df$Export <- df$Export/1000\n        df$Import <- df$Import/1000\n        #Reading the main file\n        main <- get_main()\n        ###\n        \n\n        if(input$tabs==\"Տարեկան\"){\n        \n        \n        df$Period <- NULL\n        agg1 <- df\n        years <- as.numeric(input$year)\n        fin_y <- main\n        for (year in years){\n          temp <- year_agg(agg1, year,main)\n          fin_y <- inner_join(fin_y, temp, by = c(\"Name\",\"ID\"))\n        }\n        \n        fin_y1 <- get_columns(fin_y,input$Expimp)\n        return (fin_y1)\n        }\n        else if(input$tabs==\"Ամսեկան\"){\n          month_per <- data.frame(Month = c(\"Հունվար\",\"Փետրվար\",\"Մարտ\",\"Ապրիլ\",\"Մայիս\",\"Հունիս\",\"Հուլիս\"\n                                            ,\"Օգոստոս\",\"Սեպտեմբեր\",\n                                            \"Հոկտեմբեր\",\"Նոյեմբեր\",\"Դեկտեմբեր\"),\n                                  Period = rep(1:12))\n          \n          if (input$Monthly == \"Գումարային\"){\n          \n          per <- month_per[month_per$Month==input$month_m,\"Period\"]\n          agg1 <- df[df$Period <= per,]\n          years <- as.numeric(input$year_m)\n          agg1$Period <- NULL\n          fin_m <- main\n          for (year in years){\n            temp <- year_agg(agg1, year,main)\n            fin_m <- inner_join(fin_m, temp, by = c(\"Name\",\"ID\"))\n          }\n          fin_m1 <- get_columns(fin_m,input$Expimp)\n          return (fin_m1)\n          }\n          if (input$Monthly == \"Ամեն ամսյա\"){\n            \n            per <- month_per[month_per$Month %in% input$month_m,\"Period\"]\n            # df$Year %in% as.numeric(input$year_m) \n            agg2 <- df[df$Period %in% per &\n                         df$Year %in% as.numeric(input$year_m),]\n            # fin_m1 <- get_columns(agg2,input$Expimp)\n            \n            return (agg2)\n          }\n          \n        }\n        else if(input$tabs==\"Եռամսյակային\"){\n          agg1 <- tremester_periods(df, input$three)\n          agg1$Period<-NULL\n          fin_t <- main\n          years <- as.numeric(input$year_t)\n          for (year in years){\n            temp <- year_agg(agg1, year,main)\n            fin_t <- inner_join(fin_t, temp, by = c(\"Name\",\"ID\"))\n          }\n          fin_t1 <- get_columns(fin_t,input$Expimp)\n          return (fin_t1)\n          \n        }\n      })\n      \n      agg_data <- reactive({\n        df <- my_data()\n        if (input$code == \"\"){\n          return (df)\n        }\n        else {\n          \n          text <- input$code\n          if  (grepl(',', text)){\n            code1 <- unlist(strsplit(text,','))\n          } else if (grepl('-',text)){\n            code1 <- unlist(strsplit(text,'-'))\n            code1 <- seq(as.numeric(code1[1]),as.numeric(code1[2]))\n          }\n          else {\n            code1 <- as.numeric(text)\n          }\n          \n          return (df[df$ID %in% code1,  ])\n        }\n        \n      })\n      plot_data <- reactive({\n        inFile1 <- input$file1\n        \n        if (is.null(inFile1))\n          return(NULL)\n        inFile2 <- input$file2\n        \n        if (is.null(inFile2))\n          return(NULL)\n        df  <- readxl::read_xlsx(inFile1$datapath, sheet = 1, col_names = TRUE) #Reading the file\n        colnames(df) <- c('Name','ID','Year','Period','Export_in_tonnas',\n                          'Export','Import_in_tonnas','Import')\n        \n        df[,2:8] <- apply(df[,2:8],2,as.numeric)\n        \n        df$Export <- df$Export/1000\n        df$Import <- df$Import/1000\n        main  <- readxl::read_xlsx(inFile2$datapath ,sheet = 1, col_names = FALSE) \n        colnames(main) <-  c('Name','ID')\n        main$ID<-as.numeric(main$ID)\n        \n        main[main$ID==9701 & !(is.na(main$ID)),'Name']  <- \"Ձեռքով արված նկար\"\n        main[main$ID==9702 & !(is.na(main$ID)),'Name']  <- \"Փորագրանկարի, Էստամպի, վինատպության բնօրինակներ\"\n        main[main$ID==9704 & !(is.na(main$ID)),'Name']  <- \"Քանդակների, արձանիկների բնօրինակներ\t\"\n        main[main$ID==9703 & !(is.na(main$ID)),'Name']  <- \"Նամականիշ կամ պետական տուրքի դրոշմանիշ\"\n        main[main$ID==9706 & !(is.na(main$ID)),'Name']  <- \"Հավաքածու կամ հավաքածուի առարկաներ\"\n        main[main$ID==9705 & !(is.na(main$ID)),'Name']  <- \"Հնաոճ իրեր 100ից ավելի տարիքով\"\n        rep_main <- data.frame(\"Name\" = rep(main$Name, 11),\"ID\"=rep(main$ID, 11))\n        rep_main$Year <- 0\n        year_1 <- data.frame(\"Year\"=c(2007:2017), \"i\"=c(1:11))\n        for (i in c(0:10)){\n          rep_main$Year[(i *1244): ((i+1)*1244)] <- year_1[i+1,\"Year\"]\n        }\n        titles <- main[is.na(main$ID),'Name']\n        counter <- 1\n        for (i in c(1:nrow(titles))){\n          titles[i,'Group'] = counter\n          counter = counter +1\n        }\n        test1 <- df %>%\n          filter(Year != 2018) %>%\n          group_by(ID,Year) %>%\n          summarise(Export_in_tonnas = sum(Export_in_tonnas),\n                    Export = sum(Export),\n                    Import_in_tonnas = sum(Import_in_tonnas),\n                    Import = sum(Import))\n        \n        \n        \n        test2 <- left_join(rep_main, test1, by = c(\"ID\",\"Year\"))\n        test2[4:7][is.na(test2[4:7])] <- 0\n        counter <- 0\n        \n        for (i in c(1:nrow(test2))){\n          if ((i-1)%%1244==0) {\n            counter = 0\n          }\n          if (is.na(test2[i,'ID'])) {\n            counter = counter +1\n          }\n          test2[i,'Group'] = counter\n        }\n        \n        unique(test2$Group)\n        \n        cat <- test2 %>%\n          group_by(Group, Year) %>%\n          summarise(Export_in_tonnas1 = sum(Export_in_tonnas),\n                    Export1 = sum(Export),\n                    Import_in_tonnas1 = sum(Import_in_tonnas),\n                    Import1 = sum(Import))\n        \n        test3 <- left_join(titles, cat, by = \"Group\")\n        test3['Group'] <- NULL\n        test2$Name <- as.character(test2$Name)\n        final <- left_join(test2,test3, by = c(\"Name\",\"Year\"))\n        \n        for (i in c(1:nrow(final))){\n          if (is.na(final[i,'ID'])){\n            final[i,4:7] <- final[i,9:12]\n          }\n        }\n        final <- final[,-c(8:12)]\n        return (final)\n      })\n      observe({\n        updateSelectizeInput(session,\"names_p\", choices=choice())\n      })\n      observeEvent(\n        eventExpr = input[[\"submit_loc\"]],\n        handlerExpr = {\n          if (input$first_ch==\"Որոնում\"){\n          output$table <- renderDataTable({\n            \n            agg_data();\n            })}\n          else if (input$first_ch == \"Գրաֆիկներ\"){\n            \n            output$plot1 <- renderPlot({\n              plot_dat1 <- plot_data()\n              \n              names <- as.character(input$names_p)\n              variables <- as.character(input$variables_p)\n              variables <- c(variables, \"Year\",\"Name\")\n              if (!(is.na(names))){\n                temp  <- plot_dat1[plot_dat1$Name %in% c(names),variables]\n                # print(colnames(temp))\n                ggplot(temp) +\n                  geom_point(aes(x=temp[,2],y=temp[,1]), color=\"Red\")+\n                  geom_line(aes(x=temp[,2],y=temp[,1])) + \n                  scale_x_discrete(name =\"Year\",limits=c(2007:2017)) + labs(title=input$names_p)+\n                  ylab(as.character(input$variables_p))\n              }\n              \n            })\n          }\n            \n           })\n      \n      output$downloadData <- downloadHandler(\n        filename = function() {\n          (\"filtered.xlsx\")\n        },\n        content = function(file) {\n          write_xlsx(agg_data(), file)\n        }\n      )\n      \n    })\n  ))\n\n\n",
    "created" : 1538142499030.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3241752376",
    "id" : "68A4935C",
    "lastKnownWriteTime" : 1538143462,
    "last_content_update" : 1538143462355,
    "path" : "~/Desktop/Min Economy/Final Project/final1.R",
    "project_path" : "final1.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}